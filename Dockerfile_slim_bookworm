FROM python:3.12-slim-bookworm AS builder

ARG WORK_DIR=/app

WORKDIR "$WORK_DIR"

# Prevents Python from writing pyc files.
ENV PYTHONDONTWRITEBYTECODE=1

# Keeps Python from buffering stdout and stderr to avoid situations where
# the application crashes without emitting any logs due to buffering.
ENV PYTHONUNBUFFERED=1

ENV VIRTUAL_ENV=/opt/venv
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

COPY core core
COPY backend_rds backend_rds
COPY manage.py requirements.txt ./

RUN apt-get update && \
  apt-get install --yes --no-install-recommends gcc libc6-dev libpq-dev postgresql && \
  rm -rf /var/lib/apt/lists/* && \
  python3 -m venv "$VIRTUAL_ENV" && \
  pip3 install -r requirements.txt --no-cache-dir
#   && \
#   python3 manage.py collectstatic --no-input



FROM python:3.12-slim-bookworm AS runner

ARG APP_USER=appuser
ARG APP_GROUP=appgroup
ARG WORK_DIR=/app

# ARG SECRET_KEY
# ARG DEBUG

WORKDIR "$WORK_DIR"


# Prevents Python from writing pyc files.
ENV PYTHONDONTWRITEBYTECODE=1

# Keeps Python from buffering stdout and stderr to avoid situations where
# the application crashes without emitting any logs due to buffering.
ENV PYTHONUNBUFFERED=1

ENV VIRTUAL_ENV=/opt/venv
ENV PATH="$VIRTUAL_ENV/bin:$PATH"


RUN apt-get update && \
  apt-get install --yes --no-install-recommends libpq5 && \
  rm -rf /var/lib/apt/lists/* && \
  groupadd -r "$APP_GROUP" && \
  useradd -d "$WORK_DIR" -r -g "$APP_GROUP" "$APP_USER" && \
  chown "$APP_USER":"$APP_GROUP" -R "$WORK_DIR"

# COPY --from=builder /usr/local/lib/python3.12/site-packages/ /usr/local/lib/python3.12/site-packages/
# COPY --from=builder /usr/local/bin/ /usr/local/bin/
COPY --from=builder /opt/venv /opt/venv
COPY --from=builder --chown="$APP_USER":"$APP_GROUP" "$WORK_DIR" "$WORK_DIR"

USER "$APP_USER"

EXPOSE 8000

CMD [ "gunicorn", "backend_rds.wsgi:application", "--bind", "0.0.0.0:8000" ]
